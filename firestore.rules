rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPublic() {
      return resource.data.isPublic == true;
    }

    function isQuestionAuthor(questionId) {
      return request.auth.uid == get(/databases/$(database)/documents/questions/$(questionId)).data.authorId;
    }

    // USERS
    // Users can read public user profiles.
    // Users can only create and write to their own user document.
    match /users/{userId} {
      allow read; // Make user profiles public
      allow create, update, delete: if isOwner(userId);
    }
    
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // NOTES
    // Notes can be read by anyone if they are public.
    // Users can only create, update, or delete their own notes.
    match /notes/{noteId} {
      allow read: if isPublic();
      allow create: if request.auth != null;
      allow update, delete: if isOwner(request.resource.data.authorId);
    }
    
    // QUESTIONS
    // Questions can be read by anyone.
    // Logged-in users can create questions.
    // Authors can update or delete their own questions.
    match /questions/{questionId} {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if isQuestionAuthor(questionId);
    }
    
    // COMMENTS & ANSWERS
    // Can be read by anyone.
    // Logged-in users can create them.
    // Authors can update or delete their own.
    match /{collection}/{contentId}/comments/{commentId} {
       allow read;
       allow create: if request.auth != null;
       allow update, delete: if isOwner(request.resource.data.authorId);
    }
    
    match /questions/{questionId}/answers/{answerId} {
       allow read;
       allow create: if request.auth != null;
       allow update, delete: if isOwner(request.resource.data.authorId);
    }
  }
}
