
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow users to create their own profile, but only update their own non-critical fields.
      // Points can only be changed by other backend logic, not directly by the user.
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId
                    && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'email', 'bio', 'photoURL']);
    }

    // Notes Collection
    match /notes/{noteId} {
      // Allow read access to a user's own notes or any public note.
      allow read: if request.auth != null && (resource.data.authorId == request.auth.uid || resource.data.isPublic == true);
      // Allow users to create, update, and delete their own notes.
      allow create, update, delete: if request.auth.uid == request.resource.data.authorId;
    }

    // Questions & Answers
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Users can only update/delete their own questions.
      allow update, delete: if resource.data.authorId == request.auth.uid;
      
      match /answers/{answerId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
          // Allow update if the user is the author of the answer (for edits) 
          // OR if the user is the author of the parent question (for accepting).
          allow update: if request.auth != null && (
                        resource.data.authorId == request.auth.uid ||
                        get(/databases/$(database)/documents/questions/$(questionId)).data.authorId == request.auth.uid
                      );
          allow delete: if resource.data.authorId == request.auth.uid;
      }
    }
  }
}
