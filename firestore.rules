
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users can be created by anyone during signup
    // Users can only read/write their own data
    // Public user profiles can be read by any authenticated user
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create;
      allow write: if isOwner(userId);
      
      // Notifications and votes are private to the user
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      match /votes/{voteId} {
         allow read, write: if isOwner(userId);
      }
    }
    
    // Notes can be read by any authenticated user
    // Notes can only be created/updated/deleted by their owner
    match /notes/{noteId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isOwner(resource.data.authorId);
      
      // Comments on notes
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
    // Questions can be read by any authenticated user
    // Questions can be created by any authenticated user
    // Questions can only be updated/deleted by their owner (if not anonymous)
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if resource.data.authorId != null && isOwner(resource.data.authorId);
      
      // Answers to questions
      match /answers/{answerId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        // Answers can be updated by their owner, or by the question owner to accept them
        allow update: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);
        allow delete: if isOwner(resource.data.authorId);

         // Comments on answers
        match /comments/{commentId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if isOwner(resource.data.authorId);
        }
      }

      // Comments on questions
       match /comments/{commentId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if isOwner(resource.data.authorId);
        }
    }
  }
}

    