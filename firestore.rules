rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;

      // Allow users to manage their own votes
      match /votes/{voteId} {
        allow read, create, update, delete: if request.auth.uid == userId;
      }

      // Allow users to manage their own notifications
      match /notifications/{notificationId} {
          allow read, create, update, delete: if request.auth.uid == userId;
      }
    }

    match /notes/{noteId} {
      allow read;
      allow create, update: if request.auth.uid == request.resource.data.authorId;
      allow delete: if resource.data.authorId == request.auth.uid;
      
      match /comments/{commentId} {
        allow read, create;
        allow update, delete: if request.auth.uid == resource.data.authorId || request.auth.uid == get(/databases/$(database)/documents/notes/$(noteId)).data.authorId;
      }
    }

    match /questions/{questionId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.authorId;
      allow delete: if request.auth.uid == resource.data.authorId;

      match /answers/{answerId} {
        allow read, create;
        allow update, delete: if request.auth.uid == resource.data.authorId || request.auth.uid == get(/databases/$(database)/documents/questions/$(questionId)).data.authorId;
      }

      match /comments/{commentId} {
        allow read, create;
        allow update, delete: if request.auth.uid == resource.data.authorId || request.auth.uid == get(/databases/$(database)/documents/questions/$(questionId)).data.authorId;
      }
    }

    // Allow collection group queries for answers, required for user stats
    match /{path=**}/answers/{answerId} {
      allow read;
    }
  }
}
